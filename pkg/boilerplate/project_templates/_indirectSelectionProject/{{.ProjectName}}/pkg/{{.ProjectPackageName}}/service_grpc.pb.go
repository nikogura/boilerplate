// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: service.proto

package {{.ProjectPackageName}}

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	{{.ProjectPackageName}}_Foo_FullMethodName = "/{{.ProjectPackageName}}.{{.ProjectPackageName}}/Foo"
	{{.ProjectPackageName}}_Bar_FullMethodName = "/{{.ProjectPackageName}}.{{.ProjectPackageName}}/Bar"
	{{.ProjectPackageName}}_Baz_FullMethodName = "/{{.ProjectPackageName}}.{{.ProjectPackageName}}/Baz"
)

// {{.ProjectPackageName}}Client is the client API for {{.ProjectPackageName}} service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// {{.ProjectPackageName}} service demonstrates simple method calls
type {{.ProjectPackageName}}Client interface {
	// Foo method demonstrates a simple call
	Foo(ctx context.Context, in *FooRequest, opts ...grpc.CallOption) (*FooResponse, error)
	// Bar method demonstrates a simple call
	Bar(ctx context.Context, in *BarRequest, opts ...grpc.CallOption) (*BarResponse, error)
	// Baz method demonstrates a simple call
	Baz(ctx context.Context, in *BazRequest, opts ...grpc.CallOption) (*BazResponse, error)
}

type exampleIndirectSelectionClient struct {
	cc grpc.ClientConnInterface
}

func New{{.ProjectPackageName}}Client(cc grpc.ClientConnInterface) {{.ProjectPackageName}}Client {
	return &exampleIndirectSelectionClient{cc}
}

func (c *exampleIndirectSelectionClient) Foo(ctx context.Context, in *FooRequest, opts ...grpc.CallOption) (*FooResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FooResponse)
	err := c.cc.Invoke(ctx, {{.ProjectPackageName}}_Foo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleIndirectSelectionClient) Bar(ctx context.Context, in *BarRequest, opts ...grpc.CallOption) (*BarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BarResponse)
	err := c.cc.Invoke(ctx, {{.ProjectPackageName}}_Bar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleIndirectSelectionClient) Baz(ctx context.Context, in *BazRequest, opts ...grpc.CallOption) (*BazResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BazResponse)
	err := c.cc.Invoke(ctx, {{.ProjectPackageName}}_Baz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// {{.ProjectPackageName}}Server is the server API for {{.ProjectPackageName}} service.
// All implementations must embed Unimplemented{{.ProjectPackageName}}Server
// for forward compatibility.
//
// {{.ProjectPackageName}} service demonstrates simple method calls
type {{.ProjectPackageName}}Server interface {
	// Foo method demonstrates a simple call
	Foo(context.Context, *FooRequest) (*FooResponse, error)
	// Bar method demonstrates a simple call
	Bar(context.Context, *BarRequest) (*BarResponse, error)
	// Baz method demonstrates a simple call
	Baz(context.Context, *BazRequest) (*BazResponse, error)
	mustEmbedUnimplemented{{.ProjectPackageName}}Server()
}

// Unimplemented{{.ProjectPackageName}}Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type Unimplemented{{.ProjectPackageName}}Server struct{}

func (Unimplemented{{.ProjectPackageName}}Server) Foo(context.Context, *FooRequest) (*FooResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Foo not implemented")
}
func (Unimplemented{{.ProjectPackageName}}Server) Bar(context.Context, *BarRequest) (*BarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bar not implemented")
}
func (Unimplemented{{.ProjectPackageName}}Server) Baz(context.Context, *BazRequest) (*BazResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Baz not implemented")
}
func (Unimplemented{{.ProjectPackageName}}Server) mustEmbedUnimplemented{{.ProjectPackageName}}Server() {
}
func (Unimplemented{{.ProjectPackageName}}Server) testEmbeddedByValue() {}

// Unsafe{{.ProjectPackageName}}Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to {{.ProjectPackageName}}Server will
// result in compilation errors.
type Unsafe{{.ProjectPackageName}}Server interface {
	mustEmbedUnimplemented{{.ProjectPackageName}}Server()
}

func Register{{.ProjectPackageName}}Server(s grpc.ServiceRegistrar, srv {{.ProjectPackageName}}Server) {
	// If the following call pancis, it indicates Unimplemented{{.ProjectPackageName}}Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&{{.ProjectPackageName}}_ServiceDesc, srv)
}

func _{{.ProjectPackageName}}_Foo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FooRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.({{.ProjectPackageName}}Server).Foo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: {{.ProjectPackageName}}_Foo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.({{.ProjectPackageName}}Server).Foo(ctx, req.(*FooRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _{{.ProjectPackageName}}_Bar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.({{.ProjectPackageName}}Server).Bar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: {{.ProjectPackageName}}_Bar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.({{.ProjectPackageName}}Server).Bar(ctx, req.(*BarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _{{.ProjectPackageName}}_Baz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BazRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.({{.ProjectPackageName}}Server).Baz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: {{.ProjectPackageName}}_Baz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.({{.ProjectPackageName}}Server).Baz(ctx, req.(*BazRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// {{.ProjectPackageName}}_ServiceDesc is the grpc.ServiceDesc for {{.ProjectPackageName}} service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var {{.ProjectPackageName}}_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "{{.ProjectPackageName}}.{{.ProjectPackageName}}",
	HandlerType: (*{{.ProjectPackageName}}Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Foo",
			Handler:    _{{.ProjectPackageName}}_Foo_Handler,
		},
		{
			MethodName: "Bar",
			Handler:    _{{.ProjectPackageName}}_Bar_Handler,
		},
		{
			MethodName: "Baz",
			Handler:    _{{.ProjectPackageName}}_Baz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
